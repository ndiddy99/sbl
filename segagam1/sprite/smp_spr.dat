/*	Copyright(c) 1994 SEGA			*/


/* カラー・シェーディングテーブル */
static Uint16    shdtbl0[32] = {
    RGB16_COLOR( 0, 0, 0), RGB16_COLOR( 0, 0, 1),
    RGB16_COLOR( 0, 0, 2), RGB16_COLOR( 0, 0, 3),
    RGB16_COLOR( 0, 0, 4), RGB16_COLOR( 0, 0, 5),
    RGB16_COLOR( 0, 0, 6), RGB16_COLOR( 0, 0, 7),
    RGB16_COLOR( 0, 0, 8), RGB16_COLOR( 0, 0, 9),
    RGB16_COLOR( 0, 0,10), RGB16_COLOR( 0, 0,11),
    RGB16_COLOR( 0, 0,12), RGB16_COLOR( 0, 0,13),
    RGB16_COLOR( 0, 0,14), RGB16_COLOR( 0, 0,15),
    RGB16_COLOR( 0, 0,16), RGB16_COLOR( 0, 0,17),
    RGB16_COLOR( 0, 0,18), RGB16_COLOR( 0, 0,19),
    RGB16_COLOR( 0, 0,20), RGB16_COLOR( 0, 0,21),
    RGB16_COLOR( 0, 0,22), RGB16_COLOR( 0, 0,23),
    RGB16_COLOR( 0, 0,24), RGB16_COLOR( 0, 0,25),
    RGB16_COLOR( 0, 0,26), RGB16_COLOR( 0, 0,27),
    RGB16_COLOR( 0, 0,28), RGB16_COLOR( 0, 0,29),
    RGB16_COLOR( 0, 0,30), RGB16_COLOR( 0, 0,31)
};

static Uint16    shdtbl1[32] = {
    RGB16_COLOR( 0, 0, 0), RGB16_COLOR( 0, 1, 0),
    RGB16_COLOR( 0, 2, 0), RGB16_COLOR( 0, 3, 0),
    RGB16_COLOR( 0, 4, 0), RGB16_COLOR( 0, 5, 0),
    RGB16_COLOR( 0, 6, 0), RGB16_COLOR( 0, 7, 0),
    RGB16_COLOR( 0, 8, 0), RGB16_COLOR( 0, 9, 0),
    RGB16_COLOR( 0,10, 0), RGB16_COLOR( 0,11, 0),
    RGB16_COLOR( 0,12, 0), RGB16_COLOR( 0,13, 0),
    RGB16_COLOR( 0,14, 0), RGB16_COLOR( 0,15, 0),
    RGB16_COLOR( 0,16, 0), RGB16_COLOR( 0,17, 0),
    RGB16_COLOR( 0,18, 0), RGB16_COLOR( 0,19, 0),
    RGB16_COLOR( 0,20, 0), RGB16_COLOR( 0,21, 0),
    RGB16_COLOR( 0,22, 0), RGB16_COLOR( 0,23, 0),
    RGB16_COLOR( 0,24, 0), RGB16_COLOR( 0,25, 0),
    RGB16_COLOR( 0,26, 0), RGB16_COLOR( 0,27, 0),
    RGB16_COLOR( 0,28, 0), RGB16_COLOR( 0,29, 0),
    RGB16_COLOR( 0,30, 0), RGB16_COLOR( 0,31, 0)
};

static Uint16    shdtbl2[32] = {
    RGB16_COLOR( 0, 0, 0), RGB16_COLOR( 1, 0, 0),
    RGB16_COLOR( 2, 0, 0), RGB16_COLOR( 3, 0, 0),
    RGB16_COLOR( 4, 0, 0), RGB16_COLOR( 5, 0, 0),
    RGB16_COLOR( 6, 0, 0), RGB16_COLOR( 7, 0, 0),
    RGB16_COLOR( 8, 0, 0), RGB16_COLOR( 9, 0, 0),
    RGB16_COLOR(10, 0, 0), RGB16_COLOR(11, 0, 0),
    RGB16_COLOR(12, 0, 0), RGB16_COLOR(13, 0, 0),
    RGB16_COLOR(14, 0, 0), RGB16_COLOR(15, 0, 0),
    RGB16_COLOR(16, 0, 0), RGB16_COLOR(17, 0, 0),
    RGB16_COLOR(18, 0, 0), RGB16_COLOR(19, 0, 0),
    RGB16_COLOR(20, 0, 0), RGB16_COLOR(21, 0, 0),
    RGB16_COLOR(22, 0, 0), RGB16_COLOR(23, 0, 0),
    RGB16_COLOR(24, 0, 0), RGB16_COLOR(25, 0, 0),
    RGB16_COLOR(26, 0, 0), RGB16_COLOR(27, 0, 0),
    RGB16_COLOR(28, 0, 0), RGB16_COLOR(29, 0, 0),
    RGB16_COLOR(30, 0, 0), RGB16_COLOR(31, 0, 0)
};

static Uint16    shdtbl3[32] = {
    RGB16_COLOR( 0, 0, 0), RGB16_COLOR( 0, 1, 1),
    RGB16_COLOR( 0, 2, 2), RGB16_COLOR( 0, 3, 3),
    RGB16_COLOR( 0, 4, 4), RGB16_COLOR( 0, 5, 5),
    RGB16_COLOR( 0, 6, 6), RGB16_COLOR( 0, 7, 7),
    RGB16_COLOR( 0, 8, 8), RGB16_COLOR( 0, 9, 9),
    RGB16_COLOR( 0,10,10), RGB16_COLOR( 0,11,11),
    RGB16_COLOR( 0,12,12), RGB16_COLOR( 0,13,13),
    RGB16_COLOR( 0,14,14), RGB16_COLOR( 0,15,15),
    RGB16_COLOR( 0,16,16), RGB16_COLOR( 0,17,17),
    RGB16_COLOR( 0,18,18), RGB16_COLOR( 0,19,19),
    RGB16_COLOR( 0,20,20), RGB16_COLOR( 0,21,21),
    RGB16_COLOR( 0,22,22), RGB16_COLOR( 0,23,23),
    RGB16_COLOR( 0,24,24), RGB16_COLOR( 0,25,25),
    RGB16_COLOR( 0,26,26), RGB16_COLOR( 0,27,27),
    RGB16_COLOR( 0,28,28), RGB16_COLOR( 0,29,29),
    RGB16_COLOR( 0,30,30), RGB16_COLOR( 0,31,31)
};

static Uint16    shdtbl4[32] = {
    RGB16_COLOR( 0, 0, 0), RGB16_COLOR( 1, 0, 1),
    RGB16_COLOR( 2, 0, 2), RGB16_COLOR( 3, 0, 3),
    RGB16_COLOR( 4, 0, 4), RGB16_COLOR( 5, 0, 5),
    RGB16_COLOR( 6, 0, 6), RGB16_COLOR( 7, 0, 7),
    RGB16_COLOR( 8, 0, 8), RGB16_COLOR( 9, 0, 9),
    RGB16_COLOR(10, 0,10), RGB16_COLOR(11, 0,11),
    RGB16_COLOR(12, 0,12), RGB16_COLOR(13, 0,13),
    RGB16_COLOR(14, 0,14), RGB16_COLOR(15, 0,15),
    RGB16_COLOR(16, 0,16), RGB16_COLOR(17, 0,17),
    RGB16_COLOR(18, 0,18), RGB16_COLOR(19, 0,19),
    RGB16_COLOR(20, 0,20), RGB16_COLOR(21, 0,21),
    RGB16_COLOR(22, 0,22), RGB16_COLOR(23, 0,23),
    RGB16_COLOR(24, 0,24), RGB16_COLOR(25, 0,25),
    RGB16_COLOR(26, 0,26), RGB16_COLOR(27, 0,27),
    RGB16_COLOR(28, 0,28), RGB16_COLOR(29, 0,29),
    RGB16_COLOR(30, 0,30), RGB16_COLOR(31, 0,31)
};

static Uint16    shdtbl5[32] = {
    RGB16_COLOR( 0, 0, 0), RGB16_COLOR( 1, 1, 0),
    RGB16_COLOR( 2, 2, 0), RGB16_COLOR( 3, 3, 0),
    RGB16_COLOR( 4, 4, 0), RGB16_COLOR( 5, 5, 0),
    RGB16_COLOR( 6, 6, 0), RGB16_COLOR( 7, 7, 0),
    RGB16_COLOR( 8, 8, 0), RGB16_COLOR( 9, 9, 0),
    RGB16_COLOR(10,10, 0), RGB16_COLOR(11,11, 0),
    RGB16_COLOR(12,12, 0), RGB16_COLOR(13,13, 0),
    RGB16_COLOR(14,14, 0), RGB16_COLOR(15,15, 0),
    RGB16_COLOR(16,16, 0), RGB16_COLOR(17,17, 0),
    RGB16_COLOR(18,18, 0), RGB16_COLOR(19,19, 0),
    RGB16_COLOR(20,20, 0), RGB16_COLOR(21,21, 0),
    RGB16_COLOR(22,22, 0), RGB16_COLOR(23,23, 0),
    RGB16_COLOR(24,24, 0), RGB16_COLOR(25,25, 0),
    RGB16_COLOR(26,26, 0), RGB16_COLOR(27,27, 0),
    RGB16_COLOR(28,28, 0), RGB16_COLOR(29,29, 0),
    RGB16_COLOR(30,30, 0), RGB16_COLOR(31,31, 0)
};

/* シェーディングインデックステーブル */
static Uint16    *shdIdxTbl[] = {
    (Uint16 *)shdtbl0,
    (Uint16 *)shdtbl1,
    (Uint16 *)shdtbl2,
    (Uint16 *)shdtbl3,
    (Uint16 *)shdtbl4,
    (Uint16 *)shdtbl5,
};

/* 頂点座標 */
    const MthXyz test_point_tbl[] = {
	{MTH_FIXED(-1.0),MTH_FIXED( 1.0),MTH_FIXED(-1.0)},
	{MTH_FIXED(-1.0),MTH_FIXED( 1.0),MTH_FIXED( 1.0)},
	{MTH_FIXED( 1.0),MTH_FIXED( 1.0),MTH_FIXED( 1.0)},
	{MTH_FIXED( 1.0),MTH_FIXED( 1.0),MTH_FIXED(-1.0)},
	{MTH_FIXED(-1.0),MTH_FIXED(-1.0),MTH_FIXED(-1.0)},
	{MTH_FIXED(-1.0),MTH_FIXED(-1.0),MTH_FIXED( 1.0)},
	{MTH_FIXED( 1.0),MTH_FIXED(-1.0),MTH_FIXED( 1.0)},
	{MTH_FIXED( 1.0),MTH_FIXED(-1.0),MTH_FIXED(-1.0)}
    };
/* 面定義 */
    const SprSurface test_surf_tbl[] = {
/* 頂点番号*4,描画モード,カラーデータ */
        {0,3,2,1,0x00c0,0xc000},	/* blue */
        {2,3,7,6,0x00c0,0x8200},	/* green */
        {4,0,3,7,0x00c0,0x8010},	/* red */
        {1,0,4,5,0x00c0,0xc200},	/* cyan */
        {1,2,6,5,0x40c0,0x50},   	/* Texture */
        {4,7,6,5,0x00c0,0x8210},	/* yellow */
    };

    const SprSurface test_surf_tbl2[] = {
/* 頂点番号*4,描画モード,カラーデータ */
	{0,3,2,1,0x80c0,0x00},	/* blue */
        {2,3,7,6,0x80c0,0x01},	/* green */
        {4,0,3,7,0x80c0,0x02},	/* red */
        {1,0,4,5,0x80c0,0x03},	/* cyan */
        {1,2,6,5,0x40c0,0x50},	/* Texture */
        {4,7,6,5,0x80c0,0x05},	/* yellow */
    };

#if 0
/* no shading table */
    {
        {0,3,2,1,0xc0c0,0x7c00},	/* blue */
        {2,3,7,6,0xc0c0,0x03e0},	/* green */
        {4,0,3,7,0xc0c0,0x001f},	/* red */
        {1,0,4,5,0xc0c0,0x7fe0},	/* cyan */
        {1,2,6,5,0x40c0,0x0050},	/* Texture */
        {4,7,6,5,0xc0c0,0x03ff},	/* yellow */
   }
#endif

/* 面の法線ベクトル定義 */
    const MthXyz test_norm_tbl[] = {
	{MTH_FIXED(0.0),MTH_FIXED(1.0),MTH_FIXED(0.0)},
	{MTH_FIXED(1.0),MTH_FIXED(0.0),MTH_FIXED(0.0)},
	{MTH_FIXED(0.0),MTH_FIXED(0.0),MTH_FIXED(-1.0)},
	{MTH_FIXED(-1.0),MTH_FIXED(0.0),MTH_FIXED(0.0)},
	{MTH_FIXED(0.0),MTH_FIXED(0.0),MTH_FIXED(1.0)},
	{MTH_FIXED(0.0),MTH_FIXED(-1.0),MTH_FIXED(0.0)}
    };

/* 頂点の法線ベクトル定義 */
    const MthXyz test_vert_tbl[] = {
	{MTH_FIXED(-0.577),MTH_FIXED( 0.577),MTH_FIXED(-0.577)},
	{MTH_FIXED(-0.577),MTH_FIXED( 0.577),MTH_FIXED( 0.577)},
	{MTH_FIXED( 0.577),MTH_FIXED( 0.577),MTH_FIXED( 0.577)},
	{MTH_FIXED( 0.577),MTH_FIXED( 0.577),MTH_FIXED(-0.577)},
	{MTH_FIXED(-0.577),MTH_FIXED(-0.577),MTH_FIXED(-0.577)},
	{MTH_FIXED(-0.577),MTH_FIXED(-0.577),MTH_FIXED( 0.577)},
	{MTH_FIXED( 0.577),MTH_FIXED(-0.577),MTH_FIXED( 0.577)},
	{MTH_FIXED( 0.577),MTH_FIXED(-0.577),MTH_FIXED(-0.577)}
    };

/* オブジェクト定義 */
    const SprObject3D test1obj = {

/* オブジェクト番号,表示フラグ,頂点数,面数,頂点座標テーブル,
   頂点法線ベクトルテーブル,面定義テーブル,面法線ベクトルテーブル,
   代表頂点座標テーブル,シェーディングインデックステーブル,次オブジェクト　*/

        1,0x000,8,6,&test_point_tbl[0],0,
                &test_surf_tbl[0],&test_norm_tbl[0],0,0,0
    };
    const SprObject3D test2obj = {
        2,0x100,8,6,&test_point_tbl[0],0,
                &test_surf_tbl2[0],&test_norm_tbl[0],0,shdIdxTbl,0
    };
    const SprObject3D test3obj = {
        3,0x200,8,6,&test_point_tbl[0],&test_vert_tbl[0],
                &test_surf_tbl[0],&test_norm_tbl[0],0,0,0
    };

    const SprCluster SMSP_test3clu = {
                     10,0,
		     {MTH_FIXED(0),MTH_FIXED(120),MTH_FIXED(0)},
		     {MTH_FIXED(3.46),MTH_FIXED(0),MTH_FIXED(-2.0)},
                     &test3obj,0,0
     }; 
    const SprCluster SMSP_test2clu = {
                     11,0,
                     {MTH_FIXED(0),MTH_FIXED(-120),MTH_FIXED(0)},
                     {MTH_FIXED(-3.46),MTH_FIXED(0),MTH_FIXED(-2.0)},
		     &test2obj,&SMSP_test3clu,0
     }; 
    const SprCluster SMSP_test1clu = {
                     12,0,
		     {MTH_FIXED(0),MTH_FIXED(0),MTH_FIXED(0)},
		     {MTH_FIXED(0),MTH_FIXED(0),MTH_FIXED(4.0)},
		     &test1obj,&SMSP_test2clu,0
     }; 
    const SprCluster SMSP_rootclu = {
                     13,0,
		     {0,0,0},
		     {0,0,0},
		     0,0,&SMSP_test1clu
     }; 


    const MthXyz SMSP_null_xyz = {MTH_FIXED(0.0),
                                  MTH_FIXED(0.0),
				  MTH_FIXED(0.0)};
    const MthXyz SMSP_init_point = {MTH_FIXED(0.0),
                                    MTH_FIXED(-0.0),
				    MTH_FIXED(0.0)};
    const MthXyz SMSP_rot_angle =  {MTH_FIXED(1.0),
                                    MTH_FIXED(-2.0),
				    MTH_FIXED(0.0)};

/* 光源角度 */
    const MthXyz SMSP_LightXYZ = {MTH_FIXED(45.0),
                                  MTH_FIXED(-135.0),
				  MTH_FIXED(0.0)};
/* 視点位置 */
    const MthXyz SMSP_ViewPoint = {MTH_FIXED(-0.0),
                                   MTH_FIXED(0.0),
				   MTH_FIXED(10.0)};
/* 視点角度 */
    const MthXyz SMSP_ViewAngle = {MTH_FIXED(0.0),
                                   MTH_FIXED(180.0),
				   MTH_FIXED(0.0)};

/********** テクスチャの定義 **************/
const SprTexture SMSP_Texture[] = {
    {
	0x50,			/* キャラクタ番号 */
	0x0028,			/* カラーモード */
        0,
	48,			/* キャラクタ幅 */
	32,			/* キャラクタ高さ */
	(Uint8 *)SMSP_st1_cg,	/* キャラクタデータのポインタ */
	NULL			/* ルックアップテーブルポインタ */
    },
    {
	0xffff,			/* キャラクタ番号 */
	0,			/* カラーモード */
        0,
	0,			/* キャラクタ幅 */
	0,			/* キャラクタ高さ */
	NULL,			/* キャラクタポインタ */
	NULL			/* ルックアップテーブルポインタ */
    }
};

/*---------------------------------------------------------------------------*/
/* 頂点座標 */
    const MthXyz test2_point_tbl[] = {
	{MTH_FIXED(-0.6),MTH_FIXED(-1.0),MTH_FIXED(-0.0)},
	{MTH_FIXED( 0.6),MTH_FIXED(-1.0),MTH_FIXED(-0.0)},
	{MTH_FIXED( 1.0),MTH_FIXED(-0.6),MTH_FIXED(-0.0)},
	{MTH_FIXED( 1.0),MTH_FIXED( 0.6),MTH_FIXED(-0.0)},
	{MTH_FIXED( 0.6),MTH_FIXED( 1.0),MTH_FIXED(-0.0)},
	{MTH_FIXED(-0.6),MTH_FIXED( 1.0),MTH_FIXED(-0.0)},
	{MTH_FIXED(-1.0),MTH_FIXED( 0.6),MTH_FIXED(-0.0)},
	{MTH_FIXED(-1.0),MTH_FIXED(-0.6),MTH_FIXED(-0.0)},

	{MTH_FIXED(-0.3),MTH_FIXED(-0.5),MTH_FIXED( 0.5)},
	{MTH_FIXED( 0.3),MTH_FIXED(-0.5),MTH_FIXED( 0.5)},
	{MTH_FIXED( 0.5),MTH_FIXED(-0.3),MTH_FIXED( 0.5)},
	{MTH_FIXED( 0.5),MTH_FIXED( 0.3),MTH_FIXED( 0.5)},
	{MTH_FIXED( 0.3),MTH_FIXED( 0.5),MTH_FIXED( 0.5)},
	{MTH_FIXED(-0.3),MTH_FIXED( 0.5),MTH_FIXED( 0.5)},
	{MTH_FIXED(-0.5),MTH_FIXED( 0.3),MTH_FIXED( 0.5)},
	{MTH_FIXED(-0.5),MTH_FIXED(-0.3),MTH_FIXED( 0.5)},

	{MTH_FIXED(-0.3),MTH_FIXED(-0.5),MTH_FIXED(-0.5)},
	{MTH_FIXED( 0.3),MTH_FIXED(-0.5),MTH_FIXED(-0.5)},
	{MTH_FIXED( 0.5),MTH_FIXED(-0.3),MTH_FIXED(-0.5)},
	{MTH_FIXED( 0.5),MTH_FIXED( 0.3),MTH_FIXED(-0.5)},
	{MTH_FIXED( 0.3),MTH_FIXED( 0.5),MTH_FIXED(-0.5)},
	{MTH_FIXED(-0.3),MTH_FIXED( 0.5),MTH_FIXED(-0.5)},
	{MTH_FIXED(-0.5),MTH_FIXED( 0.3),MTH_FIXED(-0.5)},
	{MTH_FIXED(-0.5),MTH_FIXED(-0.3),MTH_FIXED(-0.5)}

    };
/* 面定義 */

#define OUT_COLOR    0xe200
#define IN_COLOR     0xe300
#define OUT_MODE     0x00c0
#define IN_MODE      0x00c0

    const SprSurface test2_surf_tbl[] = {
/* 頂点番号*4,描画モード,カラーデータ */

/* 裏面 */
        { 7, 0, 8,15,IN_MODE,IN_COLOR},
        { 0, 1, 9, 8,IN_MODE,IN_COLOR},
        { 1, 2,10, 9,IN_MODE,IN_COLOR},
        { 2, 3,11,10,IN_MODE,IN_COLOR},
        { 3, 4,12,11,IN_MODE,IN_COLOR},
        { 4, 5,13,12,IN_MODE,IN_COLOR},
        { 5, 6,14,13,IN_MODE,IN_COLOR},
        { 6, 7,15,14,IN_MODE,IN_COLOR},

        { 8, 9,10,11,IN_MODE,IN_COLOR},
        { 8,11,12,15,IN_MODE,IN_COLOR},
        {15,12,13,14,IN_MODE,IN_COLOR},

        { 7, 0,16,23,IN_MODE,IN_COLOR},
        { 0, 1,17,16,IN_MODE,IN_COLOR},
        { 1, 2,18,17,IN_MODE,IN_COLOR},
        { 2, 3,19,18,IN_MODE,IN_COLOR},
        { 3, 4,20,19,IN_MODE,IN_COLOR},
        { 4, 5,21,20,IN_MODE,IN_COLOR},
        { 5, 6,22,21,IN_MODE,IN_COLOR},
        { 6, 7,23,22,IN_MODE,IN_COLOR},

        {16,17,22,23,IN_MODE,IN_COLOR},
        {17,18,21,22,IN_MODE,IN_COLOR},
        {18,19,20,21,IN_MODE,IN_COLOR},



/* 表面 */
        { 7, 0, 8,15,OUT_MODE,OUT_COLOR},
        { 0, 1, 9, 8,OUT_MODE,OUT_COLOR},
        { 1, 2,10, 9,OUT_MODE,OUT_COLOR},
        { 2, 3,11,10,OUT_MODE,OUT_COLOR},
        { 3, 4,12,11,OUT_MODE,OUT_COLOR},
        { 4, 5,13,12,OUT_MODE,OUT_COLOR},
        { 5, 6,14,13,OUT_MODE,OUT_COLOR},
        { 6, 7,15,14,OUT_MODE,OUT_COLOR},

        { 8, 9,10,11,OUT_MODE,OUT_COLOR},
        { 8,11,12,15,OUT_MODE,OUT_COLOR},
        {15,12,13,14,OUT_MODE,OUT_COLOR},

        { 7, 0,16,23,OUT_MODE,OUT_COLOR},
        { 0, 1,17,16,OUT_MODE,OUT_COLOR},
        { 1, 2,18,17,OUT_MODE,OUT_COLOR},
        { 2, 3,19,18,OUT_MODE,OUT_COLOR},
        { 3, 4,20,19,OUT_MODE,OUT_COLOR},
        { 4, 5,21,20,OUT_MODE,OUT_COLOR},
        { 5, 6,22,21,OUT_MODE,OUT_COLOR},
        { 6, 7,23,22,OUT_MODE,OUT_COLOR},

        {16,17,22,23,OUT_MODE,OUT_COLOR},
        {17,18,21,22,OUT_MODE,OUT_COLOR},
        {18,19,20,21,OUT_MODE,OUT_COLOR},

    };

/* 面の法線ベクトル定義 */
    const MthXyz test2_norm_tbl[] = {
/* 裏面 */
	{MTH_FIXED( 0.468),MTH_FIXED( 0.468),MTH_FIXED(-0.749)},
	{MTH_FIXED( 0.000),MTH_FIXED( 0.707),MTH_FIXED(-0.707)},
	{MTH_FIXED(-0.468),MTH_FIXED( 0.468),MTH_FIXED(-0.749)},
	{MTH_FIXED(-0.707),MTH_FIXED( 0.000),MTH_FIXED(-0.707)},
	{MTH_FIXED(-0.468),MTH_FIXED(-0.468),MTH_FIXED(-0.749)},
	{MTH_FIXED( 0.000),MTH_FIXED(-0.707),MTH_FIXED(-0.707)},
	{MTH_FIXED( 0.468),MTH_FIXED(-0.468),MTH_FIXED(-0.749)},
	{MTH_FIXED( 0.707),MTH_FIXED( 0.000),MTH_FIXED(-0.707)},

	{MTH_FIXED( 0.000),MTH_FIXED( 0.000),MTH_FIXED(-1.000)},
	{MTH_FIXED( 0.000),MTH_FIXED( 0.000),MTH_FIXED(-1.000)},
	{MTH_FIXED( 0.000),MTH_FIXED( 0.000),MTH_FIXED(-1.000)},

	{MTH_FIXED( 0.468),MTH_FIXED( 0.468),MTH_FIXED( 0.749)},
	{MTH_FIXED( 0.000),MTH_FIXED( 0.707),MTH_FIXED( 0.707)},
	{MTH_FIXED(-0.468),MTH_FIXED( 0.468),MTH_FIXED( 0.749)},
	{MTH_FIXED(-0.707),MTH_FIXED( 0.000),MTH_FIXED( 0.707)},
	{MTH_FIXED(-0.468),MTH_FIXED(-0.468),MTH_FIXED( 0.749)},
	{MTH_FIXED( 0.000),MTH_FIXED(-0.707),MTH_FIXED( 0.707)},
	{MTH_FIXED( 0.468),MTH_FIXED(-0.468),MTH_FIXED( 0.749)},
	{MTH_FIXED( 0.707),MTH_FIXED( 0.000),MTH_FIXED( 0.707)},

	{MTH_FIXED( 0.000),MTH_FIXED( 0.000),MTH_FIXED( 1.000)},
	{MTH_FIXED( 0.000),MTH_FIXED( 0.000),MTH_FIXED( 1.000)},
	{MTH_FIXED( 0.000),MTH_FIXED( 0.000),MTH_FIXED( 1.000)},



/* 表面 */
	{MTH_FIXED(-0.468),MTH_FIXED(-0.468),MTH_FIXED( 0.749)},
	{MTH_FIXED( 0.000),MTH_FIXED(-0.707),MTH_FIXED( 0.707)},
	{MTH_FIXED( 0.468),MTH_FIXED(-0.468),MTH_FIXED( 0.749)},
	{MTH_FIXED( 0.707),MTH_FIXED( 0.000),MTH_FIXED( 0.707)},
	{MTH_FIXED( 0.468),MTH_FIXED( 0.468),MTH_FIXED( 0.749)},
	{MTH_FIXED( 0.000),MTH_FIXED( 0.707),MTH_FIXED( 0.707)},
	{MTH_FIXED(-0.468),MTH_FIXED( 0.468),MTH_FIXED( 0.749)},
	{MTH_FIXED(-0.707),MTH_FIXED( 0.000),MTH_FIXED( 0.707)},

	{MTH_FIXED( 0.000),MTH_FIXED( 0.000),MTH_FIXED( 1.000)},
	{MTH_FIXED( 0.000),MTH_FIXED( 0.000),MTH_FIXED( 1.000)},
	{MTH_FIXED( 0.000),MTH_FIXED( 0.000),MTH_FIXED( 1.000)},

	{MTH_FIXED(-0.468),MTH_FIXED(-0.468),MTH_FIXED(-0.749)},
	{MTH_FIXED( 0.000),MTH_FIXED(-0.707),MTH_FIXED(-0.707)},
	{MTH_FIXED( 0.468),MTH_FIXED(-0.468),MTH_FIXED(-0.749)},
	{MTH_FIXED( 0.707),MTH_FIXED( 0.000),MTH_FIXED(-0.707)},
	{MTH_FIXED( 0.468),MTH_FIXED( 0.468),MTH_FIXED(-0.749)},
	{MTH_FIXED( 0.000),MTH_FIXED( 0.707),MTH_FIXED(-0.707)},
	{MTH_FIXED(-0.468),MTH_FIXED( 0.468),MTH_FIXED(-0.749)},
	{MTH_FIXED(-0.707),MTH_FIXED( 0.000),MTH_FIXED(-0.707)},

	{MTH_FIXED( 0.000),MTH_FIXED( 0.000),MTH_FIXED(-1.000)},
	{MTH_FIXED( 0.000),MTH_FIXED( 0.000),MTH_FIXED(-1.000)},
	{MTH_FIXED( 0.000),MTH_FIXED( 0.000),MTH_FIXED(-1.000)},

   };

/* 頂点の法線ベクトル定義 */
    const MthXyz test2_vert_tbl[] = {
	{MTH_FIXED(-0.707),MTH_FIXED(-0.707),MTH_FIXED( 0.000)},
	{MTH_FIXED( 0.707),MTH_FIXED(-0.707),MTH_FIXED( 0.000)},
	{MTH_FIXED( 0.707),MTH_FIXED(-0.707),MTH_FIXED( 0.000)},
	{MTH_FIXED( 0.707),MTH_FIXED( 0.707),MTH_FIXED( 0.000)},
	{MTH_FIXED( 0.707),MTH_FIXED( 0.707),MTH_FIXED( 0.000)},
	{MTH_FIXED(-0.707),MTH_FIXED( 0.707),MTH_FIXED( 0.000)},
	{MTH_FIXED(-0.707),MTH_FIXED( 0.707),MTH_FIXED( 0.000)},
	{MTH_FIXED(-0.707),MTH_FIXED(-0.707),MTH_FIXED( 0.000)},

	{MTH_FIXED( 0.000),MTH_FIXED( 0.000),MTH_FIXED( 1.000)},
	{MTH_FIXED( 0.000),MTH_FIXED( 0.000),MTH_FIXED( 1.000)},
	{MTH_FIXED( 0.000),MTH_FIXED( 0.000),MTH_FIXED( 1.000)},
	{MTH_FIXED( 0.000),MTH_FIXED( 0.000),MTH_FIXED( 1.000)},
	{MTH_FIXED( 0.000),MTH_FIXED( 0.000),MTH_FIXED( 1.000)},
	{MTH_FIXED( 0.000),MTH_FIXED( 0.000),MTH_FIXED( 1.000)},
	{MTH_FIXED( 0.000),MTH_FIXED( 0.000),MTH_FIXED( 1.000)},
	{MTH_FIXED( 0.000),MTH_FIXED( 0.000),MTH_FIXED( 1.000)},

	{MTH_FIXED( 0.000),MTH_FIXED( 0.000),MTH_FIXED(-1.000)},
	{MTH_FIXED( 0.000),MTH_FIXED( 0.000),MTH_FIXED(-1.000)},
	{MTH_FIXED( 0.000),MTH_FIXED( 0.000),MTH_FIXED(-1.000)},
	{MTH_FIXED( 0.000),MTH_FIXED( 0.000),MTH_FIXED(-1.000)},
	{MTH_FIXED( 0.000),MTH_FIXED( 0.000),MTH_FIXED(-1.000)},
	{MTH_FIXED( 0.000),MTH_FIXED( 0.000),MTH_FIXED(-1.000)},
	{MTH_FIXED( 0.000),MTH_FIXED( 0.000),MTH_FIXED(-1.000)},
	{MTH_FIXED( 0.000),MTH_FIXED( 0.000),MTH_FIXED(-1.000)},

    };

/* オブジェクト定義 */
    const SprObject3D SMSP_obj1 = {
        1,0x100,24,44,&test2_point_tbl[0],&test2_vert_tbl[0],
                &test2_surf_tbl[0],&test2_norm_tbl[0],0,0,0
    };

    const SprCluster cluster1 = {
                     20,0,
		     {0,0,0},{MTH_FIXED(-0),MTH_FIXED(0),MTH_FIXED(0)},
		     &SMSP_obj1,0,0
     }; 

    const SprCluster SMSP_root_clu2 = {
                     21,0,
		     {0,0,0},{0,0,0},
		     0,0,&cluster1
     }; 



